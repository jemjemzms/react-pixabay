{"version":3,"sources":["components/nabvar/NavBar.js","components/image-results/ImageResults.js","components/search/Search.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","AppBar_default","title","ImageResults","state","open","currentImg","openHandler","img","_this","setState","closeHandler","imageListContent","_this2","this","images","props","GridList","cols","map","tags","key","id","subtitle","user","actionIcon","IconButton_default","onClick","largeImageURL","zoom_in_default","color","src","alt","actions","FlatButton_default","label","primary","Dialog_default","modal","onRequestClose","style","width","Component","Search","searchText","amount","apiUrl","apiKey","onTextChangeHandler","e","val","target","value","Object","defineProperty","name","axios","get","concat","then","res","data","hits","catch","err","console","log","onAmountChangeHandler","index","TextField_default","onChange","floatingLabelText","fullWidth","SelectField_default","MenuItem_default","primaryText","length","image_results_ImageResults","App","MuiThemeProvider_default","nabvar_NavBar","className","search_Search","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bf97d957.chunk.js","sourcesContent":["import React from \"react\";\nimport AppBar from \"material-ui/AppBar\";\n\nconst NavBar = () => <AppBar title=\"React PixaBay\" />;\n\nexport default NavBar;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { GridList, GridTile } from \"material-ui/GridList\";\nimport IconButton from \"material-ui/IconButton\";\nimport ZoomIn from \"material-ui/svg-icons/action/zoom-in\";\nimport Dialog from \"material-ui/Dialog\";\nimport FlatButton from \"material-ui/FlatButton\";\n\nclass ImageResults extends Component {\n  state = {\n    open: false,\n    currentImg: \"\"\n  };\n\n  static propTypes = {\n    images: PropTypes.array.isRequired\n  };\n\n  openHandler = img => {\n    this.setState({ open: true, currentImg: img });\n  };\n\n  closeHandler = () => {\n    this.setState({ open: false });\n  };\n\n  render() {\n    let imageListContent;\n    const { images } = this.props;\n\n    if (images) {\n      imageListContent = (\n        <GridList cols={3}>\n          {images.map(img => (\n            <GridTile\n              title={img.tags}\n              key={img.id}\n              subtitle={\n                <span>\n                  by <strong>{img.user}</strong>\n                </span>\n              }\n              actionIcon={\n                <IconButton onClick={() => this.openHandler(img.largeImageURL)}>\n                  <ZoomIn color=\"white\" />\n                </IconButton>\n              }\n            >\n              <img src={img.largeImageURL} alt=\"\" />\n            </GridTile>\n          ))}\n        </GridList>\n      );\n    } else {\n      imageListContent = null;\n    }\n\n    const actions = [\n      <FlatButton label=\"Close\" primary={true} onClick={this.closeHandler} />\n    ];\n\n    return (\n      <div>\n        {imageListContent}\n        <Dialog\n          actions={actions}\n          modal={false}\n          open={this.state.open}\n          onRequestClose={this.closeHandler}\n        >\n          <img src={this.state.currentImg} alt=\"\" style={{ width: \"100%\" }} />\n        </Dialog>\n      </div>\n    );\n  }\n}\n\nexport default ImageResults;\n","import React, { Component } from \"react\";\nimport TextField from \"material-ui/TextField\";\nimport SelectField from \"material-ui/SelectField\";\nimport MenuItem from \"material-ui/MenuItem\";\nimport axios from \"axios\";\nimport ImageResults from \"../image-results/ImageResults\";\n\nclass Search extends Component {\n  state = {\n    searchText: \"\",\n    amount: 15,\n    apiUrl: \"https://pixabay.com/api\",\n    apiKey: \"11473757-fe34bf0ec7ae8b0da42641e80\",\n    images: []\n  };\n\n  onTextChangeHandler = e => {\n    const val = e.target.value;\n    this.setState({ [e.target.name]: val }, () => {\n      if (val === \"\") {\n        this.setState({ images: [] });\n      } else {\n        axios\n          .get(\n            `${this.state.apiUrl}/?key=${this.state.apiKey}&q=${\n              this.state.searchText\n            }&image_type=photo&per_page=${this.state.amount}&safesearch=true`\n          )\n          .then(res => this.setState({ images: res.data.hits }))\n          .catch(err => console.log(err));\n      }\n    });\n  };\n\n  onAmountChangeHandler = (e, index, value) => this.setState({ amount: value });\n\n  render() {\n    return (\n      <div>\n        <TextField\n          name=\"searchText\"\n          value={this.state.searchText}\n          onChange={this.onTextChangeHandler}\n          floatingLabelText=\"Search For Images\"\n          fullWidth={true}\n        />\n        <br />\n        <SelectField\n          name=\"amount\"\n          floatingLabelText=\"Amount\"\n          value={this.state.amount}\n          onChange={this.onAmountChangeHandler}\n        >\n          <MenuItem value={5} primaryText=\"5\" />\n          <MenuItem value={10} primaryText=\"10\" />\n          <MenuItem value={15} primaryText=\"15\" />\n          <MenuItem value={30} primaryText=\"30\" />\n          <MenuItem value={50} primaryText=\"50\" />\n        </SelectField>\n        <br />\n        {this.state.images.length > 0 ? (\n          <ImageResults images={this.state.images} />\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default Search;\n","import React, { Component } from \"react\";\nimport MuiThemeProvider from \"material-ui/styles/MuiThemeProvider\";\nimport NavBar from \"./components/nabvar/NavBar\";\nimport Search from \"./components/search/Search\";\n\nclass App extends Component {\n  render() {\n    return (\n      <MuiThemeProvider>\n        <div>\n          <NavBar />\n          <div className=\"container\">\n            <Search />\n          </div>\n        </div>\n      </MuiThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}